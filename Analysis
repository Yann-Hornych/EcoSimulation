# -*- coding: utf-8 -*-
# from __future__ import division
from pylab import np, plt
from scipy import stats
from module.save import Database


class InfoDiagram(object):

    def __init__(self):

        self.db = Database()

        self.given_relative_info = None
        self.useful_relative_info = None

        self.money_frequency_for_ui = None
        self.money_frequency_for_gi = None

        self.error_for_ui = None
        self.error_for_gi = None

        self.read_data()
        self.plot()

    def read_data(self):

        self.given_relative_info = np.unique(self.db.read_column(column_name='information_by_round'))

        useful_info = np.asarray([float(i) for i in
                                  self.db.read_column(column_name='useful_information_mean')])*10
        useful_info_bis = np.asarray([int(i) for i in useful_info])/10
        self.useful_relative_info = np.unique(useful_info_bis)
        print(self.useful_relative_info)
        id0 = []
        for i in range(len(self.useful_relative_info)):
            id0 += [[]]
            id0[i] += [np.where(useful_info_bis == self.useful_relative_info[i])[0]]

        self.money_frequency_for_ui = list(np.zeros(len(self.useful_relative_info)))
        self.money_frequency_for_gi = list(np.zeros(len(self.given_relative_info)))

        self.error_for_ui = list(np.zeros(len(self.useful_relative_info)))
        self.error_for_gi = list(np.zeros(len(self.given_relative_info)))

        rel_money_for_ui = []
        for i in range(len(self.useful_relative_info)):
            rel_money_for_ui += [[]]
            for j in range(len(id0[i][0])):
                id1 = id0[i][0][j]
                rel_money_for_ui[i] += [self.db.read_column(column_name='money')[id1]]
            self.error_for_ui[i] = stats.sem(rel_money_for_ui[i])

        for i in range(len(self.useful_relative_info)):

            money_for_ui = np.sum([int(i != -1) for i in rel_money_for_ui[i]])
            n = len(rel_money_for_ui[i])
            self.money_frequency_for_ui[i] = money_for_ui/float(n)

        for i, a in enumerate(self.given_relative_info):

            rel_money_for_gi = self.db.read_column(column_name='money', information_by_round=a)
            self.error_for_gi[i] = stats.sem(rel_money_for_gi)
            n = len(rel_money_for_gi)
            n_money = np.sum([int(k != -1) for k in rel_money_for_gi])
            self.money_frequency_for_gi[i] = n_money / float(n)

        print(self.useful_relative_info)
        print(self.money_frequency_for_ui)
        print(self.money_frequency_for_gi)
        print('error for ui : ', self.error_for_ui)
        print('error for gi : ', self.error_for_gi)

    def plot(self):

        x1 = self.useful_relative_info
        e1 = self.error_for_ui
        y1 = self.money_frequency_for_ui

        x2 = self.given_relative_info
        e2 = self.error_for_gi
        y2 = self.money_frequency_for_gi

        plt.figure(1, figsize=(25, 20))

        plt.plot(x1, y1, 'b', label='$Quantity\;\; of\;\; useful\;\; information$')
        plt.plot(x2, y2, 'r', label='$Quantity\;\; of\;\; given\;\; information$')
        plt.errorbar(x1, y1, e1, linestyle='None', marker='^', ecolor='b')
        plt.errorbar(x2, y2, e2, linestyle='None', marker='^', ecolor='r')
        plt.legend(loc=4, fontsize=20, frameon=True, fancybox=True, shadow=True)

        for i in range(11):
            plt.axhline(y=i/10, xmin=0, xmax=1, hold=None, ls='--', color='lightgrey')
            plt.axvline(x=i/10, ymin=0, ymax=1, hold=None, ls='--', color='lightgrey')

        a = np.max(self.money_frequency_for_ui)
        b = np.max(self.money_frequency_for_gi)
        m = np.max(a, b)
        plt.xlim([0, 1])
        plt.ylim([0, m+0.2])

        plt.title('$Information\;\;impact\;\;on\;\;money\;\;emergence$', fontsize=30)

        plt.xlabel('\n $Relative\;\;information$', fontsize=25)
        plt.ylabel('\n $Money\;\; emergence\;\; frequency$', fontsize=25)

        plt.savefig('info_diagram.pdf')
        plt.show()


if __name__ == "__main__":

        p = InfoDiagram()
